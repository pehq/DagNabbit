"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[434],{7397:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates the Matrix value with the size in x, and y","params":[{"name":"...","desc":"you get the idea","lua_type":"number|Vector2|Vector2int16|Vector3|Vector3int16|table|boolean"}],"returns":[{"desc":"Returns the Matrix class","lua_type":"Matrix"}],"function_type":"static","source":{"line":90,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"fromMatrix","desc":"Creates the Matrix value with a raw matrix value.","params":[{"name":"matrixVal","desc":"the matrix Value","lua_type":"{{any}}"}],"returns":[{"desc":"Returns the Matrix class","lua_type":"Matrix"}],"function_type":"static","source":{"line":114,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"SetAll","desc":"Set all the values in the Matrix to one value. Useful for setting up a Matrix.","params":[{"name":"val","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":129,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"RectSet","desc":"Sets a certain area based on a Rect to a value","params":[{"name":"rectVal","desc":"","lua_type":"Rect"},{"name":"val","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":142,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"SetByChar","desc":"Sets all of a certain value contained in the Matrix to another Value, useful for setting booleans into characters.","params":[{"name":"Char","desc":"","lua_type":"any"},{"name":"val","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":153,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"SetByObject","desc":"Sets all of a certain value contained in the Matrix to another Value **based on the charset**, useful for converting certain characters into another character.","params":[{"name":"str","desc":"","lua_type":"string"},{"name":"val","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":167,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"SetRandomBool","desc":"Sets all of the Matrix\'s values to either true or false.","params":[],"returns":[],"function_type":"method","source":{"line":181,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"SetMultipleChars","desc":"Sets all of a certain value contained in the Matrix to another Value, useful for setting booleans into characters.","params":[{"name":"chars","desc":"","lua_type":"any"},{"name":"val","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":192,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"GetNumOfChars","desc":"returns the number of times a value is used within the Matrix.","params":[{"name":"val","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":209,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"AddOn","desc":"Adds a matrix over another matrix. __Anything that\'s a false value won\'t be overlaid over the base matrix.__ If the other matrix being added onto the base matrix goes out of bounds then the out of bounds won\'t be counted. Can be offsetted from the top-left with offset.","params":[{"name":"otherMatrix","desc":"","lua_type":"Matrix"},{"name":"offset","desc":"Offsetted from the top left of the Matrix","lua_type":"Vector2"}],"returns":[],"function_type":"method","source":{"line":229,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"Overlay","desc":"Adds a matrix over another matrix. If the other matrix being added onto the base matrix goes out of bounds then the out of bounds won\'t be counted. Can be offsetted from the top-left with offset.","params":[{"name":"otherMatrix","desc":"","lua_type":"Matrix"},{"name":"offset","desc":"Offsetted from the top left of the Matrix","lua_type":"Vector2"}],"returns":[],"function_type":"method","source":{"line":252,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"Mask","desc":"Adds a matrix over another matrix. Will overlay nil values but at the cost of performance. If the other matrix being added onto the base matrix goes out of bounds then the out of bounds won\'t be counted. Can be offsetted from the top-left with offset.","params":[{"name":"otherMatrix","desc":"","lua_type":"Matrix"},{"name":"offset","desc":"Offsetted from the top left of the Matrix","lua_type":"Vector2"}],"returns":[],"function_type":"method","source":{"line":274,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"Extract","desc":"Extracts a Matrix from one point to another, creating another Matrix.","params":[{"name":"p1","desc":"","lua_type":"Vector2"},{"name":"p2","desc":"","lua_type":"Vector2"}],"returns":[{"desc":"","lua_type":"Matrix"}],"function_type":"method","source":{"line":295,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"FlipHorizontally","desc":"lips the values in the Matrix on the x-axis.","params":[],"returns":[],"function_type":"method","source":{"line":332,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"FlipVertically","desc":"lips the values in the Matrix on the y-axis.","params":[],"returns":[],"function_type":"method","source":{"line":352,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"Rotate90Clockwise","desc":"lips the values in the Matrix 90 degrees clockwise.","params":[],"returns":[],"function_type":"method","source":{"line":368,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"Rotate180","desc":"lips the values in the Matrix upside down.","params":[],"returns":[],"function_type":"method","source":{"line":393,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"Rotate90CounterClockwise","desc":"lips the values in the Matrix 90 degrees counter-clockwise.","params":[],"returns":[],"function_type":"method","source":{"line":399,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"Invert","desc":"nverts all booleans contained within the Matrix.","params":[],"returns":[],"function_type":"method","source":{"line":405,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"FlipNeighbors","desc":"ill change all false values that are next to a true value into true.","params":[],"returns":[],"function_type":"method","source":{"line":417,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"Cull","desc":"Zooms in on areas that use a true value, useful for optimization.","params":[],"returns":[{"desc":"","lua_type":"Matrix"}],"function_type":"method","source":{"line":446,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"InsertConnector","desc":"Inserts a Connector","params":[{"name":"p1","desc":"","lua_type":"Vector2"},{"name":"p2","desc":"","lua_type":"Vector2"}],"returns":[],"function_type":"method","source":{"line":486,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"ShowConnectors","desc":"Change the values in the Matrix to that of the starting and ending connectors, will default to \\"S\\" and \\"E\\" respectively if no values for them are provided","params":[{"name":"StartChar","desc":"","lua_type":"any"},{"name":"EndChar","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":495,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"SetStartingConnectors","desc":"ets all starting connectors to one Vector2","params":[{"name":"val","desc":"","lua_type":"Vector2"}],"returns":[],"function_type":"method","source":{"line":512,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"SetEndingConnectors","desc":"ets all ending connectors to one Vector2","params":[{"name":"val","desc":"","lua_type":"Vector2"}],"returns":[],"function_type":"method","source":{"line":525,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"GetFarthestConnectorIndex","desc":"Gets the Connector that has the highest magnitude.","params":[],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":541,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"Border","desc":"ill surround the Matrix with a value","params":[{"name":"borderChar","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":561,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"Wallify","desc":"ery niche but surrounds all Floor characters with a Wall character.","params":[],"returns":[],"function_type":"method","source":{"line":578,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"SetRandomChar","desc":"ets all values to a random character from the Charset","params":[],"returns":[],"function_type":"method","source":{"line":602,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"Print","desc":"eatly prints the Matrix in the terminal, will only work if all values are strings or numbers","params":[],"returns":[],"function_type":"method","source":{"line":617,"path":"src/Shared/DagNabbit/Matrix/init.luau"}},{"name":"Generate","desc":"hile this function may appear to be useful, DO NOT USE IN PRODUCTION. It takes a long time to load and causes lag! For that reason, it\'s only meant to be used as a way to debug stuff.","params":[{"name":"BlueprintSelected","desc":"","lua_type":"ModuleScript"}],"returns":[],"function_type":"method","source":{"line":624,"path":"src/Shared/DagNabbit/Matrix/init.luau"}}],"properties":[],"types":[],"name":"Matrix","desc":"A grid of values","source":{"line":4,"path":"src/Shared/DagNabbit/Matrix/init.luau"}}')}}]);